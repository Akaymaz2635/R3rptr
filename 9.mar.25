import customtkinter as ctk
from docx import Document
from tkinter import filedialog, ttk, Tk, messagebox
import tkinter as tk
import shutil
import os

# Tema ayarlarını modern bir görünüme uygun hale getir
ctk.set_appearance_mode("dark")  # Koyu tema
ctk.set_default_color_theme("blue")  # Modern mavi tema

class TableViewer(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Tam Tablo Görüntüleyici - ACTUAL ile EntryBox")
        self.geometry("1200x900")

        # Ana çerçeve (modern padding ile)
        self.main_frame = ctk.CTkFrame(self, corner_radius=10)
        self.main_frame.pack(padx=30, pady=30, fill="both", expand=True)

        # Başlık etiketi (modern font ve stil)
        self.title_label = ctk.CTkLabel(self.main_frame, text="Tablo Verilerini Görüntüle", font=("Helvetica", 24, "bold"))
        self.title_label.pack(pady=(0, 20))

        # Dosya seçme butonu (büyük ve modern)
        self.select_button = ctk.CTkButton(self.main_frame, text="Dosya Seç", font=("Helvetica", 16), 
                                          width=200, height=40, corner_radius=8, 
                                          command=self.select_file)
        self.select_button.pack(pady=20)

        # Tablo seçim ComboBox'ı
        self.table_selector = ctk.CTkComboBox(self.main_frame, values=[], font=("Helvetica", 14), 
                                             width=200, height=30, corner_radius=6, 
                                             command=self.on_table_select)
        self.table_selector.pack(pady=10)

        # Verileri saklamak için liste ve sözlükler
        self.table_data = []  # Tüm tabloların verilerini saklar
        self.actual_values = {}  # ACTUAL değerlerini saklamak için
        self.widgets = {}  # UI widget'larını saklamak için (güncellemeler için)
        self.selected_table_idx = 0  # Seçilen tablo indeksi (varsayılan: 0)
        self.selected_file_path = None  # Seçilen Word dosyasının yolunu saklar
        self.headers = []  # Sınıf düzeyinde başlıkları sakla

    def select_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Word dosyaları", "*.docx")])
        if file_path:
            self.selected_file_path = file_path  # Seçilen dosya yolunu sakla
            self.read_word_tables(file_path)
            self.update_table_selector()
            self.show_table()

    def read_word_tables(self, docx_path):
        """
        Word (.docx) dosyasından tüm tabloları oku ve liste olarak sakla, "RECORDIG SHEET" satırlarını atla.
        """
        doc = Document(docx_path)
        self.table_data = []
        self.actual_values = {}
        self.widgets = {}

        for table in doc.tables:
            table_data = []
            for row in table.rows:
                row_data = [cell.text.strip() for cell in row.cells]  # Boş hücreleri atla
                # "RECORDIG SHEET" satırını atla
                if not any("RECORDIG SHEET" in str(cell) for cell in row_data):
                    if row_data:  # Boş satırları ekleme
                        table_data.append(row_data)
            if table_data:  # Boş tabloları ekleme
                self.table_data.append(table_data)

        # table_data'yı yazdır
        print("Table Data:", self.table_data)

    def update_table_selector(self):
        if self.table_data:
            table_names = [f"Tablo {i+1}" for i in range(len(self.table_data))]
            self.table_selector.configure(values=table_names)
            self.table_selector.set(table_names[0])

    def on_table_select(self, choice):
        try:
            table_idx = self.table_selector.get().split()[1]
            self.selected_table_idx = int(table_idx) - 1
            self.show_table()
        except Exception as e:
            print(f"Tablo seçimi hatası: {str(e)}")

    def show_table(self):
        # Önceki widget'ları temizle (başlık, buton ve selector hariç)
        for widget in self.main_frame.winfo_children():
            if widget not in [self.select_button, self.title_label, self.table_selector]:
                widget.destroy()

        if not self.table_data or self.selected_table_idx >= len(self.table_data):
            ctk.CTkLabel(self.main_frame, text="Tablo verisi bulunamadı.", font=("Helvetica", 16)).pack(pady=20)
            return

        # Seçilen tabloyu al
        table = self.table_data[self.selected_table_idx]
        if not table or not table[0]:
            return

        # Başlıkları al ve sınıf düzeyinde sakla
        self.headers = table[0]  # Sınıf düzeyinde headers sakla
        print("Tablo başlıkları:", self.headers)  # Hata ayıklaması için başlıkları yazdır
        
        # "Lot Check" başlığını ekle
        self.headers.append("Lot Check")

        # Başlıkları daha esnek bir şekilde ara (büyük/küçük harf ve boşlukları temizle)
        actual_col_idx = -1
        item_no_col_idx = -1
        dimension_col_idx = -1  # DIMENSION sütununu ekliyoruz
        tooling_col_idx = -1
        insp_level_col_idx = -1

        for idx, header in enumerate(self.headers[:-1]):  # Son eklenen "Lot Check" dışındaki başlıkları kontrol et
            header_upper = header.strip().upper()
            if "ACTUAL" in header_upper:
                actual_col_idx = idx
            if "ITEM NO" in header_upper or "ITEMNO" in header_upper:  # ITEM NO veya ITEMNO için esneklik
                item_no_col_idx = idx
            if "DIMENSION" in header_upper:  # DIMENSION için esneklik
                dimension_col_idx = idx
            if "TOOLING" in header_upper:
                tooling_col_idx = idx
            if "INSP. LEVEL" in header_upper or "INSPLEVEL" in header_upper:  # INSP. LEVEL için esneklik
                insp_level_col_idx = idx

        if actual_col_idx == -1:
            ctk.CTkLabel(self.main_frame, text="Tabloda ACTUAL sütunu bulunamadı.", font=("Helvetica", 16)).pack(pady=20)
            return
        if dimension_col_idx == -1 or item_no_col_idx == -1:
            ctk.CTkLabel(self.main_frame, text="Tabloda DIMENSION veya ITEM NO sütunu bulunamadı.", font=("Helvetica", 16)).pack(pady=20)
            return

        # Yatay kaydırma çubuğu için CTkScrollableFrame
        self.table_frame = ctk.CTkScrollableFrame(self.main_frame, corner_radius=10, orientation="horizontal")
        self.table_frame.pack(pady=20, padx=20, fill="both", expand=True)

        # Sütun genişliklerini otomatik ayarlama için maksimum uzunlukları hesapla
        col_widths = [0] * len(self.headers)
        for row in table:
            for j, cell in enumerate(row):
                if j < len(col_widths):  # Indexing hatası engelle
                    col_widths[j] = max(col_widths[j], len(str(cell)))
        
        # "Lot Check" sütunu için genişlik belirle
        lot_check_col_idx = len(self.headers) - 1
        col_widths[lot_check_col_idx] = 12  # "Lot Check" başlığı uzunluğu

        # Pencerenin genişliğini al ve bu genişliğe göre kolon genişliklerini dağıt
        window_width = self.winfo_screenwidth()  # Tam ekran genişliği
        num_cols = len(self.headers)
        base_width = max(150, min(window_width // num_cols, max(col_widths) * 12))  # Minimum 150, maksimum pencereye göre

        # Tabloyu grid düzeni ile oluştur
        for i, row in enumerate(table):
            if i == 0:  # Başlık satırı
                for j, cell in enumerate(self.headers):  # self.headers kullanılıyor (Lot Check için)
                    # Sütun genişliğini pencereye göre ayarla
                    width = base_width
                    label = ctk.CTkLabel(self.table_frame, text=cell, font=("Helvetica", 14, "bold"), 
                                        width=width, anchor="center", corner_radius=6, 
                                        bg_color="transparent")
                    label.grid(row=i, column=j, padx=5, pady=5, sticky="nsew")
            else:  # Veri satırları
                for j, cell in enumerate(row):
                    width = base_width
                    if j == actual_col_idx:  # ACTUAL sütunu (sadece EntryBox olarak)
                        key = f"{row[dimension_col_idx]}_{row[item_no_col_idx]}"  # Birleşik anahtar
                        print(f"Initializing ACTUAL for key: {key}")  # Hata ayıklama
                        entry = ctk.CTkEntry(self.table_frame, width=width, height=30, corner_radius=6, 
                                            font=("Helvetica", 14))
                        entry.insert(0, cell or self.actual_values.get(key, ""))  # Mevcut değeri al
                        entry.grid(row=i, column=j, padx=5, pady=5, sticky="nsew")
                        entry.bind("<Return>", lambda e, r=key, w=entry: self.update_actual_value(r, w.get()))  # Enter tuşuyla kaydet
                        entry.bind("<FocusOut>", lambda e, r=key, w=entry: self.update_actual_value(r, w.get()))  # Fokus kaybedildiğinde kaydet
                        self.widgets[key] = entry
                    else:
                        label = ctk.CTkLabel(self.table_frame, text=cell or "", font=("Helvetica", 14), 
                                            width=width, anchor="center", corner_radius=6, 
                                            bg_color="transparent")
                        label.grid(row=i, column=j, padx=5, pady=5, sticky="nsew")
                
                # "Lot Check" sütununa "Detail" butonu ekle
                detail_button = ctk.CTkButton(self.table_frame, text="Detail", font=("Helvetica", 12), 
                                            width=width-20, height=30, corner_radius=6,
                                            command=lambda r=i, item=row[item_no_col_idx], dim=row[dimension_col_idx]: 
                                                    self.show_lot_detail(r, item, dim))
                detail_button.grid(row=i, column=lot_check_col_idx, padx=5, pady=5, sticky="nsew")

        # Grid sütunlarını yapılandır
        for j in range(len(self.headers)):
            self.table_frame.grid_columnconfigure(j, weight=1, minsize=base_width)

        # Grid satırlarını yapılandır
        for i in range(len(table)):
            self.table_frame.grid_rowconfigure(i, weight=1)

        # Butonları tablo çerçevesinin sol alt köşesine ekle
        button_frame = ctk.CTkFrame(self.table_frame)
        button_frame.grid(row=len(table), column=0, columnspan=len(self.headers), pady=10, padx=5, sticky="w")

        save_button = ctk.CTkButton(button_frame, text="Kaydet", font=("Helvetica", 14), 
                                    width=100, height=30, corner_radius=6, 
                                    command=self.save_values)
        save_button.pack(side="left", padx=5)

        report_button = ctk.CTkButton(button_frame, text="Rapor Oluştur", font=("Helvetica", 14), 
                                      width=120, height=30, corner_radius=6, 
                                      command=self.create_report)
        report_button.pack(side="left", padx=5)

    def show_lot_detail(self, row_idx, item_no, dimension):
        """
        "Detail" butonuna tıklandığında lot detaylarını gösterir.
        """
        # Anahtarın sağlam olup olmadığını kontrol et
        dimension = dimension if dimension else "Unknown Dimension"
        item_no = item_no if item_no else "Unknown Item"

        key = f"{dimension}_{item_no}"  # Birleşik anahtar
        actual_value = self.actual_values.get(key, "")

        # Yeni bir pencere oluştur
        detail_window = ctk.CTkToplevel(self)
        detail_window.title(f"Lot Detail - {item_no}")
        detail_window.geometry("500x500")  # Biraz daha yüksek pencere 
        detail_window.grab_set()  # Modal pencere (ana pencereyi kilitler)

        # İçerik çerçevesi
        content_frame = ctk.CTkFrame(detail_window, corner_radius=10)
        content_frame.pack(padx=20, pady=20, fill="both", expand=True)

        # Başlık
        ctk.CTkLabel(content_frame, text=f"Lot Detail for Item: {item_no}", 
                    font=("Helvetica", 18, "bold")).pack(pady=(10, 20))

        # Scrollable info frame
        # Önce dış çerçeve (main_info_frame) oluştur
        main_info_frame = ctk.CTkFrame(content_frame, corner_radius=8)
        main_info_frame.pack(padx=15, pady=10, fill="both", expand=True)
        
        # İçine ScrollableFrame ekle
        info_scroll = ctk.CTkScrollableFrame(main_info_frame, corner_radius=8)
        info_scroll.pack(fill="both", expand=True)
        
        # Scrollable frame'in içine asıl içeriği koy (info_frame)
        info_frame = ctk.CTkFrame(info_scroll, corner_radius=0)
        info_frame.pack(fill="both", expand=True)

        # DIMENSION ve ITEM NO bilgileri
        ctk.CTkLabel(info_frame, text=f"DIMENSION: {dimension}", 
                    font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
        ctk.CTkLabel(info_frame, text=f"ITEM NO: {item_no}", 
                    font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
        ctk.CTkLabel(info_frame, text=f"ACTUAL Value: {actual_value}", 
                    font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
        
        # Part Quantity row with Increase/Decrease buttons
        quantity_frame = ctk.CTkFrame(info_frame)
        quantity_frame.pack(fill="x", padx=15, pady=5)
        
        # Part Quantity label
        part_quantity_label = ctk.CTkLabel(quantity_frame, text="Part Quantity:", 
                                        font=("Helvetica", 14))
        part_quantity_label.pack(side="left", padx=(0, 10))
        
        # Quantity value variable
        quantity_var = tk.StringVar(value="0")
        quantity_display = ctk.CTkLabel(quantity_frame, 
                                    textvariable=quantity_var,
                                    font=("Helvetica", 14, "bold"))
        quantity_display.pack(side="left", padx=10)
        
        # Scrollable parts frame
        parts_scroll = ctk.CTkScrollableFrame(info_frame, corner_radius=6, height=150)
        parts_scroll.pack(fill="x", padx=15, pady=10)
        
        # Frame for part number text boxes
        parts_frame = ctk.CTkFrame(parts_scroll, corner_radius=0)
        parts_frame.pack(fill="both", expand=True)
        
        # Dictionary to store text entries
        part_entries = {}
        
        # Function to update part number entries
        def update_part_entries():
            # Clear existing entries
            for widget in parts_frame.winfo_children():
                widget.destroy()
                
            # Get current quantity
            quantity = int(quantity_var.get())
            
            # Add a label if there are parts
            if quantity > 0:
                ctk.CTkLabel(parts_frame, text="Part Numbers:", 
                            font=("Helvetica", 14, "bold")).pack(anchor="w", pady=(0, 5))
            
            # Create new entries based on quantity
            for i in range(1, quantity + 1):
                # Create frame for each entry
                entry_frame = ctk.CTkFrame(parts_frame)
                entry_frame.pack(fill="x", pady=2)
                
                # Add label with part number
                ctk.CTkLabel(entry_frame, text=f"{i}-", 
                            font=("Helvetica", 12)).pack(side="left", padx=(0, 5))
                
                # Add text entry
                entry = ctk.CTkEntry(entry_frame, width=200, height=30, corner_radius=6, 
                                font=("Helvetica", 12))
                entry.pack(side="left", fill="x", expand=True)
                
                # Store the entry for later retrieval
                part_entries[i] = entry
        
        # Increase button
        def increase_quantity():
            current = int(quantity_var.get())
            quantity_var.set(str(current + 1))
            update_part_entries()
            
        increase_btn = ctk.CTkButton(quantity_frame, text="Increase", 
                                    font=("Helvetica", 12),
                                    width=80, height=25, corner_radius=6,
                                    command=increase_quantity)
        increase_btn.pack(side="left", padx=5)
        
        # Decrease button
        def decrease_quantity():
            current = int(quantity_var.get())
            if current > 0:  # Prevent negative values
                quantity_var.set(str(current - 1))
                update_part_entries()
                
        decrease_btn = ctk.CTkButton(quantity_frame, text="Decrease", 
                                    font=("Helvetica", 12),
                                    width=80, height=25, corner_radius=6,
                                    command=decrease_quantity)
        decrease_btn.pack(side="left", padx=5)

        # Initialize the part entries
        update_part_entries()
        
        # Ek bilgiler eklenebilir (örneğin, tarih, kullanıcı, vb.)
        ctk.CTkLabel(info_frame, text=f"Row Index: {row_idx}", 
                    font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)

        # İleri detay eklemek için hazır alanlar
        ctk.CTkLabel(info_frame, text="Additional Notes:", 
                    font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=(15, 5))

        # Not giriş alanı ve scrollbar
        notes_frame = ctk.CTkFrame(info_frame)
        notes_frame.pack(padx=15, pady=5, fill="x")

        notes_entry = ctk.CTkTextbox(notes_frame, height=100, corner_radius=6)
        notes_entry.pack(side="left", fill="both", expand=True)

        scrollbar = ctk.CTkScrollbar(notes_frame, command=notes_entry.yview)
        scrollbar.pack(side="right", fill="y")
        notes_entry.configure(yscrollcommand=scrollbar.set)

        # Notları kaydetme fonksiyonu
        def save_notes():
            notes_text = notes_entry.get("1.0", "end").strip()
            print(f"Notes for {item_no}: {notes_text}")  # Burada dosyaya da kaydedilebilir
            
            # Get all part numbers
            part_numbers = {}
            for i, entry in part_entries.items():
                part_numbers[i] = entry.get()
            
            # Find min and max values from part numbers
            valid_numbers = []
            for num_str in part_numbers.values():
                if not num_str or not num_str.strip():
                    continue
                    
                # Handle potential slash-separated values
                if '/' in num_str:
                    # Split by slash and process each part
                    parts = num_str.split('/')
                    for part in parts:
                        try:
                            if part and part.strip():
                                valid_numbers.append(float(part.strip()))
                        except ValueError:
                            # Skip values that can't be converted to float
                            continue
                else:
                    # Handle single values
                    try:
                        valid_numbers.append(float(num_str))
                    except ValueError:
                        # Skip values that can't be converted to float
                        continue
            
            # Calculate min and max if valid numbers exist
            if valid_numbers:
                min_value = min(valid_numbers)
                max_value = max(valid_numbers)
                min_max_str = f"{min_value} / {max_value}"
                print(f"Min / Max for {item_no}: {min_max_str}")
            else:
                print(f"No valid numeric part numbers for {item_no}")
            
            print(f"Quantity for {item_no}: {quantity_var.get()}")
            print(f"Part Numbers for {item_no}: {part_numbers}")
            
            detail_window.destroy()

        # Butonlar
        button_frame = ctk.CTkFrame(content_frame)
        button_frame.pack(pady=15)

        ctk.CTkButton(button_frame, text="Save", font=("Helvetica", 14), 
                    width=100, height=30, corner_radius=6, 
                    command=save_notes).pack(side="left", padx=10)

        ctk.CTkButton(button_frame, text="Close", font=("Helvetica", 14), 
                    width=100, height=30, corner_radius=6, 
                    command=detail_window.destroy).pack(side="left", padx=10)

    # def show_lot_detail(self, row_idx, item_no, dimension):
    #     """
    #     "Detail" butonuna tıklandığında lot detaylarını gösterir.
    #     """
    #     # Anahtarın sağlam olup olmadığını kontrol et
    #     dimension = dimension if dimension else "Unknown Dimension"
    #     item_no = item_no if item_no else "Unknown Item"

    #     key = f"{dimension}_{item_no}"  # Birleşik anahtar
    #     actual_value = self.actual_values.get(key, "")

    #     # Yeni bir pencere oluştur
    #     detail_window = ctk.CTkToplevel(self)
    #     detail_window.title(f"Lot Detail - {item_no}")
    #     detail_window.geometry("500x500")  # Biraz daha yüksek pencere 
    #     detail_window.grab_set()  # Modal pencere (ana pencereyi kilitler)

    #     # İçerik çerçevesi
    #     content_frame = ctk.CTkFrame(detail_window, corner_radius=10)
    #     content_frame.pack(padx=20, pady=20, fill="both", expand=True)

    #     # Başlık
    #     ctk.CTkLabel(content_frame, text=f"Lot Detail for Item: {item_no}", 
    #                 font=("Helvetica", 18, "bold")).pack(pady=(10, 20))

    #     # Scrollable info frame
    #     # Önce dış çerçeve (main_info_frame) oluştur
    #     main_info_frame = ctk.CTkFrame(content_frame, corner_radius=8)
    #     main_info_frame.pack(padx=15, pady=10, fill="both", expand=True)
        
    #     # İçine ScrollableFrame ekle
    #     info_scroll = ctk.CTkScrollableFrame(main_info_frame, corner_radius=8)
    #     info_scroll.pack(fill="both", expand=True)
        
    #     # Scrollable frame'in içine asıl içeriği koy (info_frame)
    #     info_frame = ctk.CTkFrame(info_scroll, corner_radius=0)
    #     info_frame.pack(fill="both", expand=True)

    #     # DIMENSION ve ITEM NO bilgileri
    #     ctk.CTkLabel(info_frame, text=f"DIMENSION: {dimension}", 
    #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
    #     ctk.CTkLabel(info_frame, text=f"ITEM NO: {item_no}", 
    #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
    #     ctk.CTkLabel(info_frame, text=f"ACTUAL Value: {actual_value}", 
    #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
        
    #     # Part Quantity row with Increase/Decrease buttons
    #     quantity_frame = ctk.CTkFrame(info_frame)
    #     quantity_frame.pack(fill="x", padx=15, pady=5)
        
    #     # Part Quantity label
    #     part_quantity_label = ctk.CTkLabel(quantity_frame, text="Part Quantity:", 
    #                                     font=("Helvetica", 14))
    #     part_quantity_label.pack(side="left", padx=(0, 10))
        
    #     # Quantity value variable
    #     quantity_var = tk.StringVar(value="0")
    #     quantity_display = ctk.CTkLabel(quantity_frame, 
    #                                 textvariable=quantity_var,
    #                                 font=("Helvetica", 14, "bold"))
    #     quantity_display.pack(side="left", padx=10)
        
    #     # Scrollable parts frame
    #     parts_scroll = ctk.CTkScrollableFrame(info_frame, corner_radius=6, height=150)
    #     parts_scroll.pack(fill="x", padx=15, pady=10)
        
    #     # Frame for part number text boxes
    #     parts_frame = ctk.CTkFrame(parts_scroll, corner_radius=0)
    #     parts_frame.pack(fill="both", expand=True)
        
    #     # Dictionary to store text entries
    #     part_entries = {}
        
    #     # Function to update part number entries
    #     def update_part_entries():
    #         # Clear existing entries
    #         for widget in parts_frame.winfo_children():
    #             widget.destroy()
                
    #         # Get current quantity
    #         quantity = int(quantity_var.get())
            
    #         # Add a label if there are parts
    #         if quantity > 0:
    #             ctk.CTkLabel(parts_frame, text="Part Numbers:", 
    #                         font=("Helvetica", 14, "bold")).pack(anchor="w", pady=(0, 5))
            
    #         # Create new entries based on quantity
    #         for i in range(1, quantity + 1):
    #             # Create frame for each entry
    #             entry_frame = ctk.CTkFrame(parts_frame)
    #             entry_frame.pack(fill="x", pady=2)
                
    #             # Add label with part number
    #             ctk.CTkLabel(entry_frame, text=f"{i}-", 
    #                         font=("Helvetica", 12)).pack(side="left", padx=(0, 5))
                
    #             # Add text entry
    #             entry = ctk.CTkEntry(entry_frame, width=200, height=30, corner_radius=6, 
    #                             font=("Helvetica", 12))
    #             entry.pack(side="left", fill="x", expand=True)
                
    #             # Store the entry for later retrieval
    #             part_entries[i] = entry
        
    #     # Increase button
    #     def increase_quantity():
    #         current = int(quantity_var.get())
    #         quantity_var.set(str(current + 1))
    #         update_part_entries()
            
    #     increase_btn = ctk.CTkButton(quantity_frame, text="Increase", 
    #                                 font=("Helvetica", 12),
    #                                 width=80, height=25, corner_radius=6,
    #                                 command=increase_quantity)
    #     increase_btn.pack(side="left", padx=5)
        
    #     # Decrease button
    #     def decrease_quantity():
    #         current = int(quantity_var.get())
    #         if current > 0:  # Prevent negative values
    #             quantity_var.set(str(current - 1))
    #             update_part_entries()
                
    #     decrease_btn = ctk.CTkButton(quantity_frame, text="Decrease", 
    #                                 font=("Helvetica", 12),
    #                                 width=80, height=25, corner_radius=6,
    #                                 command=decrease_quantity)
    #     decrease_btn.pack(side="left", padx=5)

    #     # Initialize the part entries
    #     update_part_entries()
        
    #     # Ek bilgiler eklenebilir (örneğin, tarih, kullanıcı, vb.)
    #     ctk.CTkLabel(info_frame, text=f"Row Index: {row_idx}", 
    #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)

    #     # İleri detay eklemek için hazır alanlar
    #     ctk.CTkLabel(info_frame, text="Additional Notes:", 
    #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=(15, 5))

    #     # Not giriş alanı ve scrollbar
    #     notes_frame = ctk.CTkFrame(info_frame)
    #     notes_frame.pack(padx=15, pady=5, fill="x")

    #     notes_entry = ctk.CTkTextbox(notes_frame, height=100, corner_radius=6)
    #     notes_entry.pack(side="left", fill="both", expand=True)

    #     scrollbar = ctk.CTkScrollbar(notes_frame, command=notes_entry.yview)
    #     scrollbar.pack(side="right", fill="y")
    #     notes_entry.configure(yscrollcommand=scrollbar.set)

    #     # Notları kaydetme fonksiyonu
    #     def save_notes():
    #         notes_text = notes_entry.get("1.0", "end").strip()
    #         print(f"Notes for {item_no}: {notes_text}")  # Burada dosyaya da kaydedilebilir
            
    #         # Get all part numbers
    #         part_numbers = {}
    #         for i, entry in part_entries.items():
    #             part_numbers[i] = entry.get()
            
    #         print(f"Quantity for {item_no}: {quantity_var.get()}")
    #         print(f"Part Numbers for {item_no}: {part_numbers}")
            
    #         detail_window.destroy()

    #     # Butonlar
    #     button_frame = ctk.CTkFrame(content_frame)
    #     button_frame.pack(pady=15)

    #     ctk.CTkButton(button_frame, text="Save", font=("Helvetica", 14), 
    #                 width=100, height=30, corner_radius=6, 
    #                 command=save_notes).pack(side="left", padx=10)

    #     ctk.CTkButton(button_frame, text="Close", font=("Helvetica", 14), 
    #                 width=100, height=30, corner_radius=6, 
    #                 command=detail_window.destroy).pack(side="left", padx=10)
        
    #     # def show_lot_detail(self, row_idx, item_no, dimension):
    #     #     """
    #     #     "Detail" butonuna tıklandığında lot detaylarını gösterir.
    #     #     """
    #     #     # Anahtarın sağlam olup olmadığını kontrol et
    #     #     dimension = dimension if dimension else "Unknown Dimension"
    #     #     item_no = item_no if item_no else "Unknown Item"

    #     #     key = f"{dimension}_{item_no}"  # Birleşik anahtar
    #     #     actual_value = self.actual_values.get(key, "")

    #     #     # Yeni bir pencere oluştur
    #     #     detail_window = ctk.CTkToplevel(self)
    #     #     detail_window.title(f"Lot Detail - {item_no}")
    #     #     detail_window.geometry("500x400")  
    #     #     detail_window.grab_set()  # Modal pencere (ana pencereyi kilitler)

    #     #     # İçerik çerçevesi
    #     #     content_frame = ctk.CTkFrame(detail_window, corner_radius=10)
    #     #     content_frame.pack(padx=20, pady=20, fill="both", expand=True)

    #     #     # Başlık
    #     #     ctk.CTkLabel(content_frame, text=f"Lot Detail for Item: {item_no}", 
    #     #                 font=("Helvetica", 18, "bold")).pack(pady=(10, 20))

    #     #     # Detay bilgileri
    #     #     info_frame = ctk.CTkFrame(content_frame, corner_radius=8)
    #     #     info_frame.pack(padx=15, pady=10, fill="both", expand=True)

    #     #     # DIMENSION ve ITEM NO bilgileri
    #     #     ctk.CTkLabel(info_frame, text=f"DIMENSION: {dimension}", 
    #     #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
    #     #     ctk.CTkLabel(info_frame, text=f"ITEM NO: {item_no}", 
    #     #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
    #     #     ctk.CTkLabel(info_frame, text=f"ACTUAL Value: {actual_value}", 
    #     #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)

    #     #     # Ek bilgiler eklenebilir (örneğin, tarih, kullanıcı, vb.)
    #     #     ctk.CTkLabel(info_frame, text=f"Row Index: {row_idx}", 
    #     #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)

    #     #     # İleri detay eklemek için hazır alanlar
    #     #     ctk.CTkLabel(info_frame, text="Additional Notes:", 
    #     #                 font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=(15, 5))

    #     #     # Not giriş alanı ve scrollbar
    #     #     notes_frame = ctk.CTkFrame(info_frame)
    #     #     notes_frame.pack(padx=15, pady=5, fill="x")

    #     #     notes_entry = ctk.CTkTextbox(notes_frame, height=100, corner_radius=6)
    #     #     notes_entry.pack(side="left", fill="both", expand=True)

    #     #     scrollbar = ctk.CTkScrollbar(notes_frame, command=notes_entry.yview)
    #     #     scrollbar.pack(side="right", fill="y")
    #     #     notes_entry.configure(yscrollcommand=scrollbar.set)

    #     #     # Notları kaydetme fonksiyonu
    #     #     def save_notes():
    #     #         notes_text = notes_entry.get("1.0", "end").strip()
    #     #         print(f"Notes for {item_no}: {notes_text}")  # Burada dosyaya da kaydedilebilir
    #     #         detail_window.destroy()

    #     #     # Butonlar
    #     #     button_frame = ctk.CTkFrame(content_frame)
    #     #     button_frame.pack(pady=15)

    #     #     ctk.CTkButton(button_frame, text="Save", font=("Helvetica", 14), 
    #     #                 width=100, height=30, corner_radius=6, 
    #     #                 command=save_notes).pack(side="left", padx=10)

    #     #     ctk.CTkButton(button_frame, text="Close", font=("Helvetica", 14), 
    #     #                 width=100, height=30, corner_radius=6, 
    #     #                 command=detail_window.destroy).pack(side="left", padx=10)


    #     # def show_lot_detail(self, row_idx, item_no, dimension):
    #     #     """
    #     #     "Detail" butonuna tıklandığında lot detaylarını gösterir.
    #     #     """
    #     #     key = f"{dimension}_{item_no}"  # Birleşik anahtar
    #     #     actual_value = self.actual_values.get(key, "")
            
    #     #     # Yeni bir pencere oluştur
    #     #     detail_window = ctk.CTkToplevel(self)
    #     #     detail_window.title(f"Lot Detail - {item_no}")
    #     #     detail_window.geometry("500x400")
    #     #     detail_window.grab_set()  # Modal pencere (ana pencereyi kilitler)
            
    #     #     # İçerik çerçevesi
    #     #     content_frame = ctk.CTkFrame(detail_window, corner_radius=10)
    #     #     content_frame.pack(padx=20, pady=20, fill="both", expand=True)
            
    #     #     # Başlık
    #     #     ctk.CTkLabel(content_frame, text=f"Lot Detail for Item: {item_no}", 
    #     #                  font=("Helvetica", 18, "bold")).pack(pady=(10, 20))
            
    #     #     # Detay bilgileri
    #     #     info_frame = ctk.CTkFrame(content_frame, corner_radius=8)
    #     #     info_frame.pack(padx=15, pady=10, fill="both", expand=True)
            
    #     #     # DIMENSION ve ITEM NO bilgileri
    #     #     ctk.CTkLabel(info_frame, text=f"DIMENSION: {dimension}", 
    #     #                  font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
    #     #     ctk.CTkLabel(info_frame, text=f"ITEM NO: {item_no}", 
    #     #                  font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
    #     #     ctk.CTkLabel(info_frame, text=f"ACTUAL Value: {actual_value}", 
    #     #                  font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
            
    #     #     # Ek bilgiler eklenebilir (örneğin, tarih, kullanıcı, vb.)
    #     #     ctk.CTkLabel(info_frame, text=f"Row Index: {row_idx}", 
    #     #                  font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=5)
            
    #     #     # İleri detay eklemek için hazır alanlar
    #     #     ctk.CTkLabel(info_frame, text="Additional Notes:", 
    #     #                  font=("Helvetica", 14)).pack(anchor="w", padx=15, pady=(15, 5))
    #     #     notes_entry = ctk.CTkTextbox(info_frame, height=100, corner_radius=6)
    #     #     notes_entry.pack(padx=15, pady=5, fill="x")
            
    #     #     # Kapat butonu
    #     #     ctk.CTkButton(content_frame, text="Close", font=("Helvetica", 14), 
    #     #                   width=100, height=30, corner_radius=6, 
    #     #                   command=detail_window.destroy).pack(pady=15)

    def update_actual_value(self, key, value):
            """ACTUAL değerini (EntryBox üzerinden) güncelle, birleşik anahtar üzerinden."""
            print(f"Updating actual value for key: {key}, Value: {value}")  # Hata ayıklama
            self.actual_values[key] = value

    def save_values(self):
            """Actual değerlerini saklar, birleşik anahtar üzerinden."""
            for key, value in self.actual_values.items():
                print(f"Kayıt: {key} -> {value}")  # Debugging için
            print("Actual Values:", self.actual_values)  # Ek hata ayıklama
            messagebox.showinfo("Başarılı", "Değerler başarıyla kaydedildi!")

    def create_report(self):
            """Rapor oluştur: Word dosyasını masaüstüne kopyala, actual değerlerini güncelle ve kaydet, birleşik anahtar üzerinden."""
            if not self.selected_file_path:
                messagebox.showerror("Hata", "Lütfen önce bir Word dosyası seçin!")
                return

            # Masaüstüne kopyala
            desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
            new_file_path = os.path.join(desktop_path, f"updated_{os.path.basename(self.selected_file_path)}")
            shutil.copy2(self.selected_file_path, new_file_path)

            # Kopyalanan Word dosyasını aç
            doc = Document(new_file_path)
            table_idx = self.selected_table_idx  # Seçilen tablo indeksini kullan

            if table_idx < len(doc.tables):
                table = doc.tables[table_idx]
                headers = [cell.text.strip().upper() for cell in table.rows[0].cells]  # Büyük harfe çevir, boşlukları temizle
                
                # Hata ayıklaması için başlıkları yazdır
                print("Tablo başlıkları:", headers)

                actual_col_idx = -1
                dimension_col_idx = -1  # DIMENSION sütununu ekliyoruz
                item_no_col_idx = -1  # ITEM NO sütununu ekliyoruz

                # Başlıkları daha esnek bir şekilde ara
                for idx, header in enumerate(headers):
                    if "ACTUAL" in header:
                        actual_col_idx = idx
                    if "DIMENSION" in header:
                        dimension_col_idx = idx
                    if "ITEM NO" in header or "ITEMNO" in header:  # ITEM NO veya ITEMNO için esneklik
                        item_no_col_idx = idx

                if actual_col_idx == -1:
                    messagebox.showerror("Hata", "Tabloda ACTUAL sütunu bulunamadı!")
                    return
                if dimension_col_idx == -1 or item_no_col_idx == -1:
                    messagebox.showerror("Hata", "Tabloda DIMENSION veya ITEM NO sütunu bulunamadı!")
                    return

                # Hata ayıklaması için actual_values içeriğini yazdır
                print("Actual Values:", self.actual_values)

                # Actual değerlerini tabloya yaz (DIMENSION ve ITEM NO üzerinden eşleştir, daha esnek arama)
                updated_count = 0
                for i, row in enumerate(table.rows[1:], start=1):  # Başlık satırını atla
                    dimension = row.cells[dimension_col_idx].text.strip().upper() if dimension_col_idx != -1 else ""
                    item_no = row.cells[item_no_col_idx].text.strip().upper() if item_no_col_idx != -1 else ""
                    
                    # Hata ayıklaması için satır anahtarlarını yazdır
                    print(f"Satır {i} - DIMENSION: {dimension}, ITEM NO: {item_no}")

                    # Birleşik anahtar oluştur
                    key = f"{dimension}_{item_no}" if dimension and item_no else (dimension if dimension else item_no)
                    if key:  # Anahtar boş değilse
                        # actual_values'deki anahtarları büyük harfe çevirerek ara
                        for actual_key in self.actual_values.keys():
                            if str(actual_key).strip().upper() == key:
                                row.cells[actual_col_idx].text = str(self.actual_values[actual_key])
                                updated_count += 1
                                print(f"Eşleşme bulundu: {key} -> {self.actual_values[actual_key]}")
                                break

                # Güncelleme olup olmadığını kontrol et
                if updated_count > 0:
                    # Dosyayı kaydet
                    doc.save(new_file_path)
                    messagebox.showinfo("Başarılı", f"Rapor başarıyla masaüstüne kaydedildi: {new_file_path} (Güncellenen satır sayısı: {updated_count})")
                else:
                    messagebox.showwarning("Uyarı", "Hiçbir değer güncellenmedi. Lütfen ACTUAL değerlerini kaydedin ve tekrar deneyin.")

            else:
                messagebox.showerror("Hata", "Seçilen tablo bulunamadı!")

def main():
    app = TableViewer()
    app.mainloop()

if __name__ == "__main__":
    main()
